#!/usr/bin/env python3

# This node subscribes to darknet_ros/bounding_boxes (array of bounding boxes), 
# and /scan (lidar data). The node publishes to the topic /object_map.

from __future__ import division
import sys, math
import rospy
import cv2
import darknet_ros_msgs.msg as darknet
from visual_slam.msg import ObjectLocation, ObjectLocations
from sensor_msgs.msg import LaserScan, Image
from cv_bridge import CvBridge, CvBridgeError
from copy import deepcopy
from std_msgs.msg import Header
# Default camera specs (Raspberry Pi Camera Module v2)
FIELD_OF_VIEW=62.2 # horizontal degrees
# 1280 for physical turtlebot3, 640 for sim
RESOLUTION_WIDTH=1280
# RESOLUTION_WIDTH=640
DISTANCE_BT_LIDAR_CAM=0.14 # Distance between lidar and camera, in meters

class object_map:

    def __init__(self, fov=FIELD_OF_VIEW, total_columns=RESOLUTION_WIDTH):
        view_image = rospy.get_param('~enable_image', True)
        '''Initialize ROS subscriber, camera specs'''
        self.bounding_boxes = rospy.Subscriber("/darknet_ros/bounding_boxes", darknet.BoundingBoxes, self.b_boxes_callback)
        self.num_b_boxes = rospy.Subscriber("darknet_ros/found_object", darknet.ObjectCount, self.num_boxes_callback)
        self.range_data = rospy.Subscriber("/scan", LaserScan, self.lidar_callback)
        rospy.loginfo("Subscribing to bounding boxes topic /darknet_ros/bounding_boxes")
        self.total_columns = total_columns
        self.fov = fov
        self.degrees_per_column = fov/self.total_columns # horizontal degrees
        self.boxes = []
        self.obstacle_locs = []
        self.converted_data = []
        self.publisher = rospy.Publisher("/segmented_lidar_data", ObjectLocations)
        '''visualizer'''
        if view_image:
            self.image_sub = rospy.Subscriber("/darknet_ros/detection_image", Image, self.image_callback)
            self.bridge = CvBridge()
            self.visualizer = rospy.Publisher("/lidar_yolo_visualizer", Image)
    
    def num_boxes_callback(self, data):
        if data.count == 0:
            self.boxes = []

    def image_callback(self, data):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)
        i = 0
        # 340 for physical turtlebot, 170 for sim
        # y = 340
        # y = 170
        for obstacle in self.obstacle_locs:
            if len(obstacle["polar_coords"]) == 0:
                continue
            if i % 3 == 0:
                color = (255, 0, 255)
            elif i % 3 == 1:
                color = (0, 255, 0)
            else:
                color = (0, 0, 255)
            i = i+1
            for point in obstacle["polar_coords"]:
                x = self.angle_to_x_pos(point[1])
                y = int(obstacle["y_center"])
                cv_image[y-15:y+15, x-5:x+5] = color

        # Show all lidar data points on image
        # if len(self.converted_data) > 0:
        #     y = y-10
        #     for point in self.converted_data:
        #         x = self.angle_to_x_pos(point[1])
        #         cv_image[y:y+20, x:x+10] = (255,255,255)

        cv2.imshow('Lidar Yolo Visualizer', cv_image)
        cv2.waitKey(1)
        try:
            self.visualizer.publish(self.bridge.cv2_to_imgmsg(cv_image, "bgr8"))
        except CvBridgeError as e:
            print(e)


    def x_pos_to_angle(self, x_coor):
        '''Converts a pixel's x position to an angle, where zero degrees 
           is directly in front of the camera and positive is counter-clockwise'''
        x_origin = self.total_columns/2
        return (x_origin - x_coor)*self.degrees_per_column

    def angle_to_x_pos(self, angle):
        x_origin = self.total_columns/2
        return int(round(angle/self.degrees_per_column*-1 + x_origin))    
        
    def b_boxes_callback(self, data):
        self.boxes = []
        for bounding_box in data.bounding_boxes:
            box = {
                "class": bounding_box.Class,
                "confidence": bounding_box.probability,
                "min_angle": math.floor(self.x_pos_to_angle(bounding_box.xmax)), # swap xmax and xmin because coordinate system is reversed
                "max_angle": math.ceil(self.x_pos_to_angle(bounding_box.xmin)),
                "y_center": (bounding_box.ymin+bounding_box.ymax)/2
            }
            self.boxes.append(box)
        # rospy.loginfo(str(self.boxes))

    def lidar_frame_to_camera(self, radius, angle):
        '''Changes lidar data to a coordinate system where the origin 
        is at the camera instead of the lidar sensor. 0 degrees is in front,
        positive is counter-clockwise.'''
        if radius <= 0.01:
            return 0, angle
        if angle == 0:
            return max(radius - DISTANCE_BT_LIDAR_CAM, DISTANCE_BT_LIDAR_CAM), 0
        theta = angle/180 * math.pi
        x_length = radius * math.sin(theta)
        y_length = radius * math.cos(theta) - DISTANCE_BT_LIDAR_CAM
        new_radius = math.sqrt(math.pow(x_length,2) + math.pow(y_length,2))
        new_angle = math.asin(x_length/new_radius)/math.pi*180
        return new_radius, new_angle

    def lidar_callback(self, data):
        range_data = data.ranges
        range_min = data.range_min
        range_max = data.range_max
        data_to_convert = range_data[:int(math.ceil(self.fov/2))] + range_data[int(math.ceil(self.fov/2)*-1):]
        self.converted_data = []
        for i in range(int(math.ceil(self.fov/2))):
            self.converted_data.append(self.lidar_frame_to_camera(data_to_convert[i], i) + (i,))
        for i in range(-1*int(math.ceil(self.fov/2)), 0):
            self.converted_data.append(self.lidar_frame_to_camera(data_to_convert[i], i) + (i,))
        self.obstacle_locs = []
        if len(self.boxes) > 0:
            for box in self.boxes: 
                obstacle = box
                polar_coords = set()
                # Find lidar data that lies inside bounding boxes generated by YOLO
                for radius, angle_cam, angle_lidar in self.converted_data:
                    if angle_cam >= obstacle["min_angle"] and angle_cam <= obstacle["max_angle"] \
                        and radius >= self.lidar_frame_to_camera(range_min, angle_cam)[0] \
                            and radius <= self.lidar_frame_to_camera(range_max, angle_cam)[0]:
                        # Polar coordinate plus the index of the original lidar measurement from /scan
                        polar_coords.add((radius, angle_cam, angle_lidar))
                # Check for overlapping bounding boxes
                for obstacle_loc in self.obstacle_locs:
                    used_angles = obstacle_loc["polar_coords"]
                    shared_angles = polar_coords.intersection(used_angles)
                    print(shared_angles)
                    # We assume that all the data in shared_angles belong to the same object, which is true for simple, continuous objects
                    if shared_angles:
                        # Case 1: new object is closer to lidar sensor and is smaller than other object
                        # (New bounding box is completely or almost completely contained within the old bounding box)
                        if len(shared_angles) >= int(len(polar_coords)*0.85):
                            # Remove shared angles from old bounding box
                            obstacle_loc["polar_coords"].difference_update(shared_angles)
                        # Case 2: reverse of case 1
                        elif len(shared_angles) >= int(len(used_angles)*0.85):
                            # Remove shared angles from old bounding box
                            polar_coords.difference_update(shared_angles)
                        # Default case: boxes are only overlapping a bit, use statistical analysis to determine which object the data most likely belongs to
                        else:
                            old_obj = used_angles.difference(shared_angles)
                            new_obj = polar_coords.difference(shared_angles)
                            old_obj_coords = [coord[1] for coord in old_obj]
                            new_obj_coords = [coord[1] for coord in new_obj]
                            shared_angles_coords = [coord[1] for coord in shared_angles]
                            old_obj_dist = sum(old_obj_coords)/len(old_obj_coords)
                            new_obj_dist = sum(new_obj_coords)/len(new_obj_coords)
                            shared_angles_dist = sum(shared_angles_coords)/len(shared_angles_coords)
                            if abs(shared_angles_dist - old_obj_dist) < abs(shared_angles_dist - new_obj_dist):
                                polar_coords.difference_update(shared_angles)
                            else:
                                obstacle_loc["polar_coords"].difference_update(shared_angles)
                obstacle["polar_coords"] = polar_coords
                self.obstacle_locs.append(obstacle)
        # Generate and publish message
        message = ObjectLocations()
        locations = []
        for obstacle in self.obstacle_locs:
            location = ObjectLocation()
            scan_data = deepcopy(data) # copy data to scan_data
            ranges = [0 for i in range(360)]
            # rospy.loginfo(obstacle["class"] + ":" + str(obstacle["polar_coords"]))
            for coord in obstacle["polar_coords"]:
                ranges[coord[2]] = range_data[coord[2]]
            scan_data.ranges = ranges
            scan_data.intensities = [0 for i in range(360)]
            location.scan_data = scan_data
            location.object_class = obstacle["class"]
            location.confidence = obstacle["confidence"]
            locations.append(location)
        message.obj_locations = locations
        h = Header()
        h.stamp = rospy.Time.now()
        message.header = h
        self.publisher.publish(message)

        # rospy.loginfo(self.obstacle_locs)


        
def main(args):
    '''Initializes and cleanup ROS node'''
    rospy.init_node('locate_objects', anonymous=True)
    slam = object_map()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        rospy.loginfo("Shutting down object mapping")

if __name__ == '__main__':
    main(sys.argv)
